#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–£–ù–ò–í–ï–†–°–ê–õ–¨–ù–´–ô –ì–ï–ù–ï–†–ê–¢–û–† –≠–ö–ó–ê–ú–ï–ù–ê–¶–ò–û–ù–ù–´–• –ë–ò–õ–ï–¢–û–í
–ê–≤—Ç–æ—Ä: –¢–µ–º—É—Ä –¢—É—Ä–∞–µ–≤ (temurturayev7822@gmail.com)
–í–µ—Ä—Å–∏—è: 1.0
–î–∞—Ç–∞: 2024

–§—É–Ω–∫—Ü–∏–∏:
- –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–∑ Word –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ (.docx)
- –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–∞–º–µ–Ω–∞—Ü–∏–æ–Ω–Ω—ã—Ö –±–∏–ª–µ—Ç–æ–≤ —Å –∑–∞–¥–∞–Ω–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º
- –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä–∞–∑–Ω—ã—Ö —è–∑—ã–∫–æ–≤ (—É–∑–±–µ–∫—Å–∫–∏–π, —Ä—É—Å—Å–∫–∏–π)
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–æ–≤ –ø—Ä–∏ –∏—Ö –Ω–µ—Ö–≤–∞—Ç–∫–µ
- –ö—Ä–∞—Å–∏–≤–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
"""

import random
import re
from docx import Document
from typing import List, Dict, Tuple
import os
import argparse
from datetime import datetime

class TicketGenerator:
    """–ö–ª–∞—Å—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —ç–∫–∑–∞–º–µ–Ω–∞—Ü–∏–æ–Ω–Ω—ã—Ö –±–∏–ª–µ—Ç–æ–≤"""
    
    def __init__(self, base_path: str):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞
        
        Args:
            base_path: –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å —Ñ–∞–π–ª–∞–º–∏ –≤–æ–ø—Ä–æ—Å–æ–≤
        """
        self.base_path = base_path
        self.questions = {}
        
    def extract_questions_from_file(self, file_path: str) -> List[Tuple[int, str]]:
        """
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç –≤–æ–ø—Ä–æ—Å—ã –∏–∑ Word —Ñ–∞–π–ª–∞
        
        Args:
            file_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏
            
        Returns:
            –°–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π (–Ω–æ–º–µ—Ä_–≤–æ–ø—Ä–æ—Å–∞, —Ç–µ–∫—Å—Ç_–≤–æ–ø—Ä–æ—Å–∞)
        """
        try:
            doc = Document(file_path)
            questions = []
            
            if not doc.tables:
                print(f"‚ö†Ô∏è  –í —Ñ–∞–π–ª–µ {os.path.basename(file_path)} –Ω–µ—Ç —Ç–∞–±–ª–∏—Ü")
                return questions
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–≤—É—é —Ç–∞–±–ª–∏—Ü—É
            table = doc.tables[0]
            
            print(f"üîç –ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞ {os.path.basename(file_path)}: {len(table.rows)} —Å—Ç—Ä–æ–∫, {len(table.columns)} —Å—Ç–æ–ª–±—Ü–æ–≤")
            
            question_number = 1
            
            for i, row in enumerate(table.rows):
                if i == 0:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
                    continue
                
                cells = row.cells
                
                if len(cells) >= 2:
                    # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞: –Ω–æ–º–µ—Ä | –≤–æ–ø—Ä–æ—Å
                    number_cell = cells[0].text.strip()
                    question_cell = cells[1].text.strip()
                    
                    if question_cell and len(question_cell) > 10:
                        # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –Ω–æ–º–µ—Ä
                        number_match = re.search(r'\d+', number_cell)
                        if number_match:
                            num = int(number_match.group())
                        else:
                            num = question_number
                        
                        questions.append((num, question_cell))
                        question_number += 1
                else:
                    # –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞, –±–µ—Ä–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç
                    full_text = ' '.join([cell.text.strip() for cell in cells if cell.text.strip()])
                    if len(full_text) > 15:
                        # –£–±–∏—Ä–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –µ—Å–ª–∏ –µ—Å—Ç—å
                        clean_text = re.sub(r'^\d+[\.\)]\s*', '', full_text)
                        if len(clean_text) > 10:
                            questions.append((question_number, clean_text))
                            question_number += 1
            
            print(f"üìä –ò–∑–≤–ª–µ—á–µ–Ω–æ {len(questions)} –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–∑ {os.path.basename(file_path)}")
            
            return questions
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {file_path}: {e}")
            return []
    
    def prepare_questions(self, questions: List[Tuple[int, str]], needed: int, subject_name: str) -> List[Tuple[int, str]]:
        """
        –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω—É–∂–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
        
        Args:
            questions: –°–ø–∏—Å–æ–∫ –∏—Å—Ö–æ–¥–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
            needed: –¢—Ä–µ–±—É–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤
            subject_name: –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
            
        Returns:
            –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤
        """
        if len(questions) >= needed:
            shuffled = questions.copy()
            random.shuffle(shuffled)
            result = shuffled[:needed]
            print(f"   ‚úÖ {subject_name}: –∏—Å–ø–æ–ª—å–∑—É–µ–º {needed} –∏–∑ {len(questions)} –≤–æ–ø—Ä–æ—Å–æ–≤ (–±–µ–∑ –ø–æ–≤—Ç–æ—Ä–æ–≤)")
            return result
        else:
            result = []
            full_cycles = needed // len(questions)
            remainder = needed % len(questions)
            
            print(f"   ‚ö†Ô∏è  {subject_name}: {len(questions)} –≤–æ–ø—Ä–æ—Å–æ–≤ √ó {full_cycles} —Ü–∏–∫–ª–æ–≤ + {remainder} –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–Ω—ã–µ —Ü–∏–∫–ª—ã
            for cycle in range(full_cycles):
                shuffled_cycle = questions.copy()
                random.shuffle(shuffled_cycle)
                result.extend(shuffled_cycle)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞—Ç–æ–∫
            if remainder > 0:
                shuffled_remainder = questions.copy()
                random.shuffle(shuffled_remainder)
                result.extend(shuffled_remainder[:remainder])
            
            return result
    
    def create_tickets(self, subject_files: Dict[str, str], subject_names: Dict[str, str], 
                      num_tickets: int) -> List[Dict]:
        """
        –°–æ–∑–¥–∞–µ—Ç —ç–∫–∑–∞–º–µ–Ω–∞—Ü–∏–æ–Ω–Ω—ã–µ –±–∏–ª–µ—Ç—ã
        
        Args:
            subject_files: –°–ª–æ–≤–∞—Ä—å {–∫–ª—é—á_–ø—Ä–µ–¥–º–µ—Ç–∞: –ø—É—Ç—å_–∫_—Ñ–∞–π–ª—É}
            subject_names: –°–ª–æ–≤–∞—Ä—å {–∫–ª—é—á_–ø—Ä–µ–¥–º–µ—Ç–∞: –Ω–∞–∑–≤–∞–Ω–∏–µ_–¥–ª—è_–æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è}
            num_tickets: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∏–ª–µ—Ç–æ–≤
            
        Returns:
            –°–ø–∏—Å–æ–∫ –±–∏–ª–µ—Ç–æ–≤
        """
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã –∏–∑ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤
        all_questions = {}
        for key, file_path in subject_files.items():
            questions = self.extract_questions_from_file(file_path)
            if not questions:
                raise ValueError(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –≤–æ–ø—Ä–æ—Å—ã –∏–∑ —Ñ–∞–π–ª–∞: {file_path}")
            all_questions[key] = questions
        
        print(f"\nüéØ –°–æ–∑–¥–∞–µ–º {num_tickets} –±–∏–ª–µ—Ç–æ–≤ –∏–∑:")
        for key, questions in all_questions.items():
            print(f"   {subject_names[key]}: {len(questions)} –≤–æ–ø—Ä–æ—Å–æ–≤")
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞
        prepared_questions = {}
        for key, questions in all_questions.items():
            prepared_questions[key] = self.prepare_questions(
                questions, num_tickets, subject_names[key]
            )
        
        # –°–æ–∑–¥–∞–µ–º –±–∏–ª–µ—Ç—ã
        tickets = []
        for i in range(num_tickets):
            ticket = {'number': i + 1}
            
            for key in subject_files.keys():
                ticket[key] = {
                    'question': prepared_questions[key][i][1],
                    'number': prepared_questions[key][i][0]
                }
            
            tickets.append(ticket)
        
        return tickets
    
    def save_tickets(self, tickets: List[Dict], subject_names: Dict[str, str], 
                    output_path: str, title: str = "–≠–ö–ó–ê–ú–ï–ù–ê–¶–ò–û–ù–ù–´–ï –ë–ò–õ–ï–¢–´"):
        """
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –±–∏–ª–µ—Ç—ã –≤ Word –¥–æ–∫—É–º–µ–Ω—Ç
        
        Args:
            tickets: –°–ø–∏—Å–æ–∫ –±–∏–ª–µ—Ç–æ–≤
            subject_names: –ù–∞–∑–≤–∞–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            output_path: –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞
            title: –ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞
        """
        doc = Document()
        
        from docx.shared import Inches, Pt
        from docx.enum.text import WD_ALIGN_PARAGRAPH
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–ª–µ–π
        sections = doc.sections
        for section in sections:
            section.top_margin = Inches(0.8)
            section.bottom_margin = Inches(0.8)
            section.left_margin = Inches(1.0)
            section.right_margin = Inches(1.0)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_para = doc.add_heading(title, 0)
        title_para.alignment = WD_ALIGN_PARAGRAPH.CENTER
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        info = doc.add_paragraph()
        info.alignment = WD_ALIGN_PARAGRAPH.CENTER
        info.add_run(f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∏–ª–µ—Ç–æ–≤: {len(tickets)} ‚Ä¢ ').bold = True
        info.add_run(f'–ü—Ä–µ–¥–º–µ—Ç—ã: {", ".join(subject_names.values())}').italic = True
        
        date_para = doc.add_paragraph(f'–°–æ–∑–¥–∞–Ω–æ: {datetime.now().strftime("%d.%m.%Y %H:%M")}')
        date_para.alignment = WD_ALIGN_PARAGRAPH.CENTER
        
        doc.add_paragraph()
        
        # –ë–∏–ª–µ—Ç—ã
        subject_keys = list(subject_names.keys())
        
        for i, ticket in enumerate(tickets):
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –±–∏–ª–µ—Ç–∞
            ticket_header = doc.add_heading(f'–ë–ò–õ–ï–¢ ‚Ññ {ticket["number"]}', level=1)
            ticket_header.alignment = WD_ALIGN_PARAGRAPH.CENTER
            
            doc.add_paragraph()
            
            # –í–æ–ø—Ä–æ—Å—ã
            for j, key in enumerate(subject_keys):
                subj_title = f'{j+1}. {subject_names[key].upper()}'
                subj_data = ticket[key]
                
                # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–µ–¥–º–µ—Ç–∞
                subj_para = doc.add_paragraph()
                run = subj_para.add_run(subj_title)
                run.bold = True
                run.font.size = Pt(12)
                
                # –ù–æ–º–µ—Ä –≤–æ–ø—Ä–æ—Å–∞
                num_para = doc.add_paragraph(f'   –í–æ–ø—Ä–æ—Å ‚Ññ{subj_data["number"]}:')
                num_para.runs[0].italic = True
                num_para.runs[0].font.size = Pt(10)
                
                # –¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞
                q_para = doc.add_paragraph(subj_data['question'])
                q_para.paragraph_format.left_indent = Inches(0.4)
                q_para.paragraph_format.right_indent = Inches(0.2)
                q_para.paragraph_format.space_after = Pt(8)
                
            # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
            if i < len(tickets) - 1:
                separator = doc.add_paragraph('‚îÄ' * 70)
                separator.alignment = WD_ALIGN_PARAGRAPH.CENTER
                
                # –ù–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∫–∞–∂–¥—ã–µ 3 –±–∏–ª–µ—Ç–∞
                if (i + 1) % 3 == 0:
                    doc.add_page_break()
        
        doc.save(output_path)
        print(f"\n‚úÖ –ë–∏–ª–µ—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {output_path}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∏–∑ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏"""
    parser = argparse.ArgumentParser(description='–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —ç–∫–∑–∞–º–µ–Ω–∞—Ü–∏–æ–Ω–Ω—ã—Ö –±–∏–ª–µ—Ç–æ–≤')
    parser.add_argument('--path', '-p', default='.', help='–ü—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å —Ñ–∞–π–ª–∞–º–∏')
    parser.add_argument('--tickets', '-t', type=int, default=360, help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∏–ª–µ—Ç–æ–≤')
    parser.add_argument('--language', '-l', choices=['uzbek', 'russian'], default='uzbek', 
                       help='–Ø–∑—ã–∫ –±–∏–ª–µ—Ç–æ–≤')
    parser.add_argument('--output', '-o', help='–ò–º—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞')
    
    args = parser.parse_args()
    
    print("üéì –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–´–ô –ì–ï–ù–ï–†–ê–¢–û–† –≠–ö–ó–ê–ú–ï–ù–ê–¶–ò–û–ù–ù–´–• –ë–ò–õ–ï–¢–û–í")
    print("=" * 60)
    
    generator = TicketGenerator(args.path)
    
    if args.language == 'uzbek':
        # –£–∑–±–µ–∫—Å–∫–∏–µ —Ñ–∞–π–ª—ã
        subject_files = {
            'adabiyot': os.path.join(args.path, "–ê–¥–∞–±–∏—ë—Ç —û–∑–±–µ–∫ —Å–∞–≤–æ–ª.docx"),
            'tarbiya': os.path.join(args.path, "–¢–∞—Ä–±–∏—è —û–∑–±–µ–∫ —Å–∞–≤–æ–ª.docx"),
            'tarikh': os.path.join(args.path, "–¢–∞—Ä–∏—Ö —û–∑–±–µ–∫ —Å–∞–≤–æ–ª.docx")
        }
        subject_names = {
            'adabiyot': '–ê–î–ê–ë–ò–Å–¢',
            'tarbiya': '–¢–ê–†–ë–ò–Ø', 
            'tarikh': '–¢–ê–†–ò–•'
        }
        title = "–≠–ö–ó–ê–ú–ï–ù–ê–¶–ò–û–ù–ù–´–ï –ë–ò–õ–ï–¢–´"
        default_output = f"–£–ó–ë–ï–ö–°–ö–ò–ï_–ë–ò–õ–ï–¢–´_{args.tickets}.docx"
    else:
        # –†—É—Å—Å–∫–∏–µ —Ñ–∞–π–ª—ã
        subject_files = {
            'literatura': os.path.join(args.path, "–ê–¥–∞–±–∏—ë—Ç —Ä—É—Å —Å–∞–≤–æ–ª.docx"),
            'vospitanie': os.path.join(args.path, "–¢–∞—Ä–±–∏—è —Ä—É—Å —Å–∞–≤–æ–ª.docx"),
            'istoriya': os.path.join(args.path, "–¢–∞—Ä–∏—Ö —Ä—É—Å —Å–∞–≤–æ–ª.docx")
        }
        subject_names = {
            'literatura': '–õ–ò–¢–ï–†–ê–¢–£–†–ê',
            'vospitanie': '–í–û–°–ü–ò–¢–ê–ù–ò–ï',
            'istoriya': '–ò–°–¢–û–†–ò–Ø'
        }
        title = "–≠–ö–ó–ê–ú–ï–ù–ê–¶–ò–û–ù–ù–´–ï –ë–ò–õ–ï–¢–´\n(–¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ–≤–æ—Ä—è—â–∏—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤)"
        default_output = f"–†–£–°–°–ö–ò–ï_–ë–ò–õ–ï–¢–´_{args.tickets}.docx"
    
    output_path = args.output or os.path.join(args.path, default_output)
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–æ–≤
        missing_files = []
        for key, file_path in subject_files.items():
            if not os.path.exists(file_path):
                missing_files.append(os.path.basename(file_path))
        
        if missing_files:
            print(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã —Ñ–∞–π–ª—ã: {', '.join(missing_files)}")
            return
        
        # –°–æ–∑–¥–∞–µ–º –±–∏–ª–µ—Ç—ã
        print(f"\nüîç –ò–∑–≤–ª–µ–∫–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã...")
        tickets = generator.create_tickets(subject_files, subject_names, args.tickets)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º
        generator.save_tickets(tickets, subject_names, output_path, title)
        
        print(f"\nüéâ –£–°–ü–ï–®–ù–û –ó–ê–í–ï–†–®–ï–ù–û!")
        print(f"üìÅ –§–∞–π–ª: {os.path.basename(output_path)}")
        print(f"üìä –ë–∏–ª–µ—Ç–æ–≤: {len(tickets)}")
        
    except Exception as e:
        print(f"\n‚ùå –û–®–ò–ë–ö–ê: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    # –ï—Å–ª–∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –±–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º
    import sys
    if len(sys.argv) == 1:
        print("üéì –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–´–ô –ì–ï–ù–ï–†–ê–¢–û–† –≠–ö–ó–ê–ú–ï–ù–ê–¶–ò–û–ù–ù–´–• –ë–ò–õ–ï–¢–û–í")
        print("=" * 60)
        print("\n–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º")
        print("–î–ª—è –ø–æ–º–æ—â–∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ: python –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä.py --help")
        
        # –ü—Ä–æ—Å—Ç–æ–π –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º
        path = input("\n–ü—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å —Ñ–∞–π–ª–∞–º–∏ (Enter –¥–ª—è —Ç–µ–∫—É—â–µ–π): ").strip() or "."
        
        print("\n–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:")
        print("1. –£–∑–±–µ–∫—Å–∫–∏–π (360 –±–∏–ª–µ—Ç–æ–≤)")
        print("2. –†—É—Å—Å–∫–∏–π (160 –±–∏–ª–µ—Ç–æ–≤)")
        choice = input("–í–∞—à –≤—ã–±–æ—Ä (1/2): ").strip()
        
        if choice == "2":
            sys.argv = [sys.argv[0], "--path", path, "--language", "russian", "--tickets", "160"]
        else:
            sys.argv = [sys.argv[0], "--path", path, "--language", "uzbek", "--tickets", "360"]
    
    main()